import { useStore } from '../redux-store/store';
import { PersistGate } from 'redux-persist/integration/react';
import { persistStore } from 'redux-persist';
import { Provider } from 'react-redux';
import Head from 'next/head';
import { ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import 'bootstrap/dist/css/bootstrap.css';
import '../styles/globals.scss';

const Cornerstone = ({ children }) => {
	return (
		<>
			<Head>
				<meta charSet="utf-8" />
				<meta httpEquiv="X-UA-Compatible" content="IE=edge" />
				{/* <!-- Required meta tags for responsive --> */}
				<meta name="viewport" content="width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no" />
				{/* page description */}
				<meta name="description" content="Generated by create next app" />
				<meta name="keywords" content="Keywords" />
				<meta name="msapplication-TileColor" content="#ffffff" />
				<meta name="msapplication-TileImage" content="/ms-icon-144x144.png" />
				<meta name="theme-color" content="#ffffff"></meta>
				<meta name="application-name" content="Next Js PWA App" />
				<meta name="apple-mobile-web-app-capable" content="yes" />
				<meta name="apple-mobile-web-app-status-bar-style" content="default" />
				<meta name="apple-mobile-web-app-title" content="Next Js PWA App" />
				<meta name="format-detection" content="telephone=no" />
				<meta name="mobile-web-app-capable" content="yes" />
				<meta name="msapplication-config" content="icons/browserconfig.xml" />
				<meta name="msapplication-TileColor" content="#ffffff" />
				<meta name="msapplication-tap-highlight" content="no" />
				{/* <!-- Twitter Card data --> */}
				<meta name="twitter:card" content="summary" />
				<meta name="twitter:url" content="#" />
				<meta name="twitter:title" content="Next Js PWA App" />
				<meta name="twitter:description" content="#" />
				<meta name="twitter:image" content="#" />
				<meta name="twitter:creator" content="#" />
				{/* <!-- Open Graph data --> */}
				<meta property="og:type" content="website" />
				<meta property="og:title" content="Next Js PWA App" />
				<meta property="og:description" content="Next Js PWA App" />
				<meta property="og:site_name" content="Next Js PWA App" />
				<meta property="og:url" content="#" />
				<meta property="og:image" content="#" />
				{/* <!-- gmail verification --> */}
				<meta name="google-site-verification" content="" />
				{/* <!-- Website title --> */}
				<title>Next.js PWA Example</title>
				{/* <!-- Favicon and touch icons --> */}
				<link rel="apple-touch-icon" sizes="57x57" href="icons/apple-icon-57x57.png" />
				<link rel="apple-touch-icon" sizes="60x60" href="icons/apple-icon-60x60.png" />
				<link rel="apple-touch-icon" sizes="72x72" href="icons/apple-icon-72x72.png" />
				<link rel="apple-touch-icon" sizes="76x76" href="icons/apple-icon-76x76.png" />
				<link rel="apple-touch-icon" sizes="114x114" href="icons/apple-icon-114x114.png" />
				<link rel="apple-touch-icon" sizes="120x120" href="icons/apple-icon-120x120.png" />
				<link rel="apple-touch-icon" sizes="144x144" href="icons/apple-icon-144x144.png" />
				<link rel="apple-touch-icon" sizes="152x152" href="icons/apple-icon-152x152.png" />
				<link rel="apple-touch-icon" sizes="180x180" href="icons/apple-icon-180x180.png" />
				<link rel="icon" type="image/png" sizes="192x192" href="icons/android-icon-192x192.png" />
				<link rel="icon" type="image/png" sizes="32x32" href="icons/favicon-32x32.png" />
				<link rel="icon" type="image/png" sizes="96x96" href="icons/favicon-96x96.png" />
				<link rel="icon" type="image/png" sizes="16x16" href="icons/favicon-16x16.png" />
				<link rel="icon" type="image/png" href="icons/favicon.ico" />
				{/* <!-- manifest for pwa --> */}
				<link rel="manifest" href="/manifest.json" />
			</Head>
			{children}
		</>
	);
};

const MyApp = ({ Component, pageProps }) => {
	// re-creating store using pageProps
	const store = useStore(pageProps.initialReduxState);

	// this ensures your redux state is saved to persisted storage whenever it changes
	const persistor = persistStore(store, {}, function () {
		persistor.persist();
	});

	return (
		<>
			<Provider store={store}>
				<PersistGate persistor={persistor} loading={null}>
					{() => (
						<Cornerstone>
							<Component {...pageProps} />
							<ToastContainer />
						</Cornerstone>
					)}
				</PersistGate>
			</Provider>
		</>
	);
};

export default MyApp;
